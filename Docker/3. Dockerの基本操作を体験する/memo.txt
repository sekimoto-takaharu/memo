◎はじめに
    コマンドで、
    「docker」と打つと、
    dockerの基本的なことについて書かれたものが出力される。

        例)
        Usage:  docker [OPTIONS] COMMAND

        A self-sufficient runtime for containers

        Common Commands:
        run         Create and run a new container from an image
        exec        Execute a command in a running container
        ps          List containers
        build       Build an image from a Dockerfile
        pull        Download an image from a registry
        push        Upload an image to a registry
        images      List images
        login       Authenticate to a registry
        logout      Log out from a registry
        search      Search Docker Hub for images
        version     Show the Docker version information
        info        Display system-wide information

        Management Commands:
        builder     Manage builds
        buildx*     Docker Buildx
        compose*    Docker Compose
        container   Manage containers
        context     Manage contexts
        debug*      Get a shell into any image or container
        desktop*    Docker Desktop commands (Alpha)
        dev*        Docker Dev Environments
        extension*  Manages Docker extensions
        feedback*   Provide feedback, right in your terminal!
        image       Manage images
        init*       Creates Docker-related starter files for your project
        manifest    Manage Docker image manifests and manifest lists
        network     Manage networks
        plugin      Manage plugins
        sbom*       View the packaged-based Software Bill Of Materials (SBOM) for an image
        scout*      Docker Scout
        system      Manage Docker
        trust       Manage trust on Docker images
        volume      Manage volumes

        Swarm Commands:
        swarm       Manage Swarm

        Commands:
        attach      Attach local standard input, output, and error streams to a running container
        commit      Create a new image from a container's changes
        cp          Copy files/folders between a container and the local filesystem
        create      Create a new container
        diff        Inspect changes to files or directories on a container's filesystem
        events      Get real time events from the server
        export      Export a container's filesystem as a tar archive
        history     Show the history of an image
        import      Import the contents from a tarball to create a filesystem image
        inspect     Return low-level information on Docker objects
        kill        Kill one or more running containers
        load        Load an image from a tar archive or STDIN
        logs        Fetch the logs of a container
        pause       Pause all processes within one or more containers
        port        List port mappings or a specific mapping for the container
        rename      Rename a container
        restart     Restart one or more containers
        rm          Remove one or more containers
        rmi         Remove one or more images
        save        Save one or more images to a tar archive (streamed to STDOUT by default)
        start       Start one or more stopped containers
        stats       Display a live stream of container(s) resource usage statistics
        stop        Stop one or more running containers
        tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
        top         Display the running processes of a container
        unpause     Unpause all processes within one or more containers
        update      Update configuration of one or more containers
        wait        Block until one or more containers stop, then print their exit codes

        Global Options:
            --config string      Location of client config files (default "/Users/user/.docker")
        -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and
                                default context set with "docker context use")
        -D, --debug              Enable debug mode
        -H, --host list          Daemon socket to connect to
        -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
            --tls                Use TLS; implied by --tlsverify
            --tlscacert string   Trust certs signed only by this CA (default "/Users/user/.docker/ca.pem")
            --tlscert string     Path to TLS certificate file (default "/Users/user/.docker/cert.pem")
            --tlskey string      Path to TLS key file (default "/Users/user/.docker/key.pem")
            --tlsverify          Use TLS and verify the remote
        -v, --version            Print version information and quit

        Run 'docker COMMAND --help' for more information on a command.

        For more help on how to use Docker, head to https://docs.docker.com/go/guides/


◎DockerでHello Worldを打つ
    下記のコマンドを打つと、
        docker container run hello-world

    下記の結果が出る
        Unable to find image 'hello-world:latest' locally
        latest: Pulling from library/hello-world
        478afc919002: Pull complete 
        Digest: sha256:305243c734571da2d100c8c8b3c3167a098cab6049c9a5b066b6021a60fcb966
        Status: Downloaded newer image for hello-world:latest

        Hello from Docker!
        This message shows that your installation appears to be working correctly.

        To generate this message, Docker took the following steps:
        1. The Docker client contacted the Docker daemon.
        2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
            (arm64v8)
        3. The Docker daemon created a new container from that image which runs the
            executable that produces the output you are currently reading.
        4. The Docker daemon streamed that output to the Docker client, which sent it
            to your terminal.

        To try something more ambitious, you can run an Ubuntu container with:
        $ docker run -it ubuntu bash

        Share images, automate workflows, and more with a free Docker ID:
        https://hub.docker.com/

        For more examples and ideas, visit:
        https://docs.docker.com/get-started/

    これは、
        hello-world:latestというイメージがローカル環境に見つからないということ
        hello-world:latestというイメージをインストールしましたということ


◎Dockerイメージとは？？
    イメージは、コンテナに必要なソフトウェア・環境変数・設定などの情報が入っている
    イメージはコンテナの型となるもの。
    イメージは、配布&コンテナ環境の再現が可能
    イメージは変更不可な静的テンプレート
    どの環境で実行しても同じコンテナ環境が再現できる

◎イメージとコンテナのライフサイクル
    イメージの入手方法
        ・docker hubなどのイメージレジストリから手にいれる
        ・Dockerfileで作成する

    イメージからコンテナが作成されるとステータスが「created」になる
    コンテナを起動するとステータスが「up」になる
    コマンドが終了すると、ステータスが「exited」になる(破棄されているわけではない)
    そこから破棄することもできる

    【コマンド一覧】
    docker image pull {イメージ名}
        イメージをダウンロードするコマンド

    docker image list
        ローカルマシンに存在するイメージ一覧を表示するコマンド

    docker image rm {イメージ名}
        ローカルマシンに存在するイメージを削除するコマンド

    
        例)
        user@usernoMacBook-Air ~ % docker image pull ubuntu
        Using default tag: latest
        latest: Pulling from library/ubuntu
        8bb55f067777: Pull complete 
        Digest: sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab
        Status: Downloaded newer image for ubuntu:latest
        docker.io/library/ubuntu:latest

        user@usernoMacBook-Air ~ % docker image ls
        REPOSITORY                   TAG       IMAGE ID       CREATED         SIZE
        ubuntu                       latest    20377134ad88   2 weeks ago     101MB

    

◎コンテナを作成する

    【使用するコマンド】
    docker container run {イメージ名}
        イメージからコンテナを作成し、起動するコマンド

    docker container ls
        ローカルマシンに存在するコンテナ一覧を表示するコマンド
        -a　オプションをつけることで、起動していないコンテナも表示される

        例)
        user@usernoMacBook-Air ~ % docker container run hello-world

        Hello from Docker!
        This message shows that your installation appears to be working correctly.

        To generate this message, Docker took the following steps:
        1. The Docker client contacted the Docker daemon.
        2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
            (arm64v8)
        3. The Docker daemon created a new container from that image which runs the
            executable that produces the output you are currently reading.
        4. The Docker daemon streamed that output to the Docker client, which sent it
            to your terminal.

        To try something more ambitious, you can run an Ubuntu container with:
        $ docker run -it ubuntu bash

        Share images, automate workflows, and more with a free Docker ID:
        https://hub.docker.com/

        For more examples and ideas, visit:
        https://docs.docker.com/get-started/

        user@usernoMacBook-Air ~ % docker container ls -a
        CONTAINER ID   IMAGE                    COMMAND                   CREATED         STATUS                     PORTS                                                      NAMES
        f77a353ba7d8   hello-world              "/hello"                  2 minutes ago   Exited (0) 2 minutes ago                                                              strange_mirzakhani


◎コンテナの停止・再起動する

    【使用するコマンド】
    docker container stop {コンテナ名}
        起動中のコンテナを止めるコマンド

    docker container restart {コンテナ名}
        コンテナを再起動する(Upにする)コマンド

        例)
        user@usernoMacBook-Air ~ % docker container stop e4bb936f4eaa
        e4bb936f4eaa
        コンテナが停止の状態

        user@usernoMacBook-Air ~ % docker container restart e4bb936f4eaa   
        e4bb936f4eaa
        コンテナが動いた状態

◎コンテナを破棄する

    【使用するコマンド】
    docker container rm {コンテナ名}
        コンテナを破棄する

        例)
        user@usernoMacBook-Air ~ % docker container rm e4bb936f4eaa  
        e4bb936f4eaa
        コンテナを削除する(コンテナがexitedの状態で行う)
