◎bashとは
    LinuxやMacなどのUnix系のOSで利用されている"シェル"の一種

    カーネル
        macやLinuxなどのUnix系のコアの部分にあり、ファイルを開いたり、書き込んだりできるソフトウェア
        機械語で会話する
        "シェル"は、人が理解できる言葉を機械語に変換してくれる

◎ubuntuをbashで操作してみる
    イメージレジストリからubuntuのイメージをダウンロードする
    このイメージを元にubuntuのコンテナを作る。
    デフォルトのコマンドとしてbashがある
        例)
        docker container run -it  ubuntu:20.04
        Unable to find image 'ubuntu:20.04' locally
        20.04: Pulling from library/ubuntu
        1b9f3c55f9d4: Pull complete 
        Digest: sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b
        Status: Downloaded newer image for ubuntu:20.04
        root@70a53f62de37:/# 

        これは、ホストOSのmacではなく、UbuntuのゲストOS上でいじっている

        exit
        user@usernoMacBook-Air ~ % 

        これで、ホストOSからゲストOSに戻ってきたことになる

◎ -itというオプションについて
    -itというオプションは「-i」と「-t」を組み合わせたオプション

    docker container run ubuntu:20.04
    この状態だと、ターミナルからコンテナ内に対して標準入力ができない状態になってしまう。

    しかし、「-i」を入力することにより
    docker container run -i ubuntu:20.04
    コンテナに対して標準入力ができるようになる。（bashに対して入力可能になる）

    ただし、この状態だとbashのコマンドが打てるが簡易的な表示になってしまう

    「-t」を入れることで、「どういう状態になっているのか」「どういう結果が返ってきているのか」が分かりやすくなる。

◎コンテナ起動時に実行されるコマンドを変更する
    
    イメージの中身がどうなっているかが分かるコマンド
    user@usernoMacBook-Air ~ % docker image inspect ubuntu:20.04
    [
        {
            "Id": "sha256:223c04ea1fd5421534fe2e2b5d85dfbea13ba4bffc44e205273c5e6f339e1cc0",
            "RepoTags": [
                "ubuntu:20.04"
            ],
            "RepoDigests": [
                "ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b"
            ],
            "Parent": "",
            "Comment": "",
            "Created": "2024-10-11T03:39:47.544702222Z",
            "DockerVersion": "24.0.7",
            "Author": "",
            "Config": {
                "Hostname": "",
                "Domainname": "",
                "User": "",
                "AttachStdin": false,
                "AttachStdout": false,
                "AttachStderr": false,
                "Tty": false,
                "OpenStdin": false,
                "StdinOnce": false,
                "Env": [
                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                ],
                "Cmd": [
                    "/bin/bash"
                ],
                "Image": "sha256:ff760f6f38c9c99652c4b7dfe7a1fbd8281c7b91cd9d706dd36f8a5956779b8a",
                "Volumes": null,
                "WorkingDir": "",
                "Entrypoint": null,
                "OnBuild": null,
                "Labels": {
                    "org.opencontainers.image.ref.name": "ubuntu",
                    "org.opencontainers.image.version": "20.04"
                }
            },
            "Architecture": "arm64",
            "Variant": "v8",
            "Os": "linux",
            "Size": 65661101,
            "GraphDriver": {
                "Data": {
                    "MergedDir": "/var/lib/docker/overlay2/05559046c3134228ccf1fae4a1266fb17237925e542355d3e3ea5c3456b7a0fc/merged",
                    "UpperDir": "/var/lib/docker/overlay2/05559046c3134228ccf1fae4a1266fb17237925e542355d3e3ea5c3456b7a0fc/diff",
                    "WorkDir": "/var/lib/docker/overlay2/05559046c3134228ccf1fae4a1266fb17237925e542355d3e3ea5c3456b7a0fc/work"
                },
                "Name": "overlay2"
            },
            "RootFS": {
                "Type": "layers",
                "Layers": [
                    "sha256:171652ecd561458ec6fcca88016f1d5552155ecaff2445a38a97f49d6b672904"
                ]
            },
            "Metadata": {
                "LastTagTime": "0001-01-01T00:00:00Z"
            }
        }
    ]

    【新しいコマンド一覧】
    docker image inspect {イメージ名}
        イメージの詳細情報を表示するコマンド

    docker container run {イメージ名} {実行したいコマンド名}
        コンテナを起動して任意のコマンドを実行させるコマンド


◎既存のコンテナにコマンドを実行させる
    【新しいコマンド一覧】
    docker container exec {コンテナ名} {実行したいコマンド}
        Up状態のコンテナ("既存のコンテナ")に任意のコマンドを実行させるコマンド

    docker conteiner run {イメージ名} {実行したいコマンド}
        イメージからコンテナを作成し、コマンドを実行する

◎コンテナに名前をつける
    docker container run --name {名前}

◎コンテナを削除する
    docker container prune
        停止しているコンテナをすべて削除

    docker container run --rm {コンテナ名}
        使用したコマンドをすぐに削除する

    docker container rm -f {コンテナ名}
        -fをつけると、動作中のコンテナも強制削除できる

◎デタッチドモードとフォアグラウンドモード

    フォアグラウンドモードは、通常モード
    デタッチドモードは、バックグラウンド上でコマンドを実行するもの